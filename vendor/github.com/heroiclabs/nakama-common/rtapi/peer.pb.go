// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v3.21.10
// source: peer.proto

package rtapi

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NakamaPeer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NakamaPeer) Reset() {
	*x = NakamaPeer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NakamaPeer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NakamaPeer) ProtoMessage() {}

func (x *NakamaPeer) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NakamaPeer.ProtoReflect.Descriptor instead.
func (*NakamaPeer) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{0}
}

type NakamaPeer_Frame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	InboxAddress string                 `protobuf:"bytes,2,opt,name=inboxAddress,proto3" json:"inboxAddress,omitempty"`
	Node         string                 `protobuf:"bytes,3,opt,name=node,proto3" json:"node,omitempty"`
	Timestamp    *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Gossip       *wrapperspb.BoolValue  `protobuf:"bytes,5,opt,name=gossip,proto3" json:"gossip,omitempty"`
	Infected     map[string]bool        `protobuf:"bytes,6,rep,name=infected,proto3" json:"infected,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// Types that are assignable to Payload:
	//
	//	*NakamaPeer_Frame_Envelope
	//	*NakamaPeer_Frame_KickedOut
	//	*NakamaPeer_Frame_Status
	//	*NakamaPeer_Frame_Track
	//	*NakamaPeer_Frame_Untrack
	//	*NakamaPeer_Frame_Broadcast
	//	*NakamaPeer_Frame_TrackUpdate
	//	*NakamaPeer_Frame_PartyJoin
	//	*NakamaPeer_Frame_PartyPromote
	//	*NakamaPeer_Frame_PartyAccept
	//	*NakamaPeer_Frame_PartyRemove
	//	*NakamaPeer_Frame_PartyClose
	//	*NakamaPeer_Frame_PartyJoinRequestList
	//	*NakamaPeer_Frame_PartyMatchmakerAdd
	//	*NakamaPeer_Frame_PartyMatchmakerRemove
	//	*NakamaPeer_Frame_PartyDataSend
	//	*NakamaPeer_Frame_PartyResult
	//	*NakamaPeer_Frame_MatchJoin
	//	*NakamaPeer_Frame_MatchJoinResult
	//	*NakamaPeer_Frame_MatchDataSend
	//	*NakamaPeer_Frame_ServiceBroadcast
	Payload isNakamaPeer_Frame_Payload `protobuf_oneof:"payload"`
}

func (x *NakamaPeer_Frame) Reset() {
	*x = NakamaPeer_Frame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NakamaPeer_Frame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NakamaPeer_Frame) ProtoMessage() {}

func (x *NakamaPeer_Frame) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NakamaPeer_Frame.ProtoReflect.Descriptor instead.
func (*NakamaPeer_Frame) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{0, 0}
}

func (x *NakamaPeer_Frame) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NakamaPeer_Frame) GetInboxAddress() string {
	if x != nil {
		return x.InboxAddress
	}
	return ""
}

func (x *NakamaPeer_Frame) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

func (x *NakamaPeer_Frame) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *NakamaPeer_Frame) GetGossip() *wrapperspb.BoolValue {
	if x != nil {
		return x.Gossip
	}
	return nil
}

func (x *NakamaPeer_Frame) GetInfected() map[string]bool {
	if x != nil {
		return x.Infected
	}
	return nil
}

func (m *NakamaPeer_Frame) GetPayload() isNakamaPeer_Frame_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *NakamaPeer_Frame) GetEnvelope() *NakamaPeer_Envelope {
	if x, ok := x.GetPayload().(*NakamaPeer_Frame_Envelope); ok {
		return x.Envelope
	}
	return nil
}

func (x *NakamaPeer_Frame) GetKickedOut() *NakamaPeer_Envelope {
	if x, ok := x.GetPayload().(*NakamaPeer_Frame_KickedOut); ok {
		return x.KickedOut
	}
	return nil
}

func (x *NakamaPeer_Frame) GetStatus() *NakamaPeer_Status {
	if x, ok := x.GetPayload().(*NakamaPeer_Frame_Status); ok {
		return x.Status
	}
	return nil
}

func (x *NakamaPeer_Frame) GetTrack() *NakamaPeer_Presence {
	if x, ok := x.GetPayload().(*NakamaPeer_Frame_Track); ok {
		return x.Track
	}
	return nil
}

func (x *NakamaPeer_Frame) GetUntrack() *NakamaPeer_Untrack {
	if x, ok := x.GetPayload().(*NakamaPeer_Frame_Untrack); ok {
		return x.Untrack
	}
	return nil
}

func (x *NakamaPeer_Frame) GetBroadcast() *NakamaPeer_Envelope {
	if x, ok := x.GetPayload().(*NakamaPeer_Frame_Broadcast); ok {
		return x.Broadcast
	}
	return nil
}

func (x *NakamaPeer_Frame) GetTrackUpdate() *NakamaPeer_Presence {
	if x, ok := x.GetPayload().(*NakamaPeer_Frame_TrackUpdate); ok {
		return x.TrackUpdate
	}
	return nil
}

func (x *NakamaPeer_Frame) GetPartyJoin() *NakamaPeer_Party_Join {
	if x, ok := x.GetPayload().(*NakamaPeer_Frame_PartyJoin); ok {
		return x.PartyJoin
	}
	return nil
}

func (x *NakamaPeer_Frame) GetPartyPromote() *NakamaPeer_Party_Promote {
	if x, ok := x.GetPayload().(*NakamaPeer_Frame_PartyPromote); ok {
		return x.PartyPromote
	}
	return nil
}

func (x *NakamaPeer_Frame) GetPartyAccept() *NakamaPeer_Party_Accept {
	if x, ok := x.GetPayload().(*NakamaPeer_Frame_PartyAccept); ok {
		return x.PartyAccept
	}
	return nil
}

func (x *NakamaPeer_Frame) GetPartyRemove() *NakamaPeer_Party_Remove {
	if x, ok := x.GetPayload().(*NakamaPeer_Frame_PartyRemove); ok {
		return x.PartyRemove
	}
	return nil
}

func (x *NakamaPeer_Frame) GetPartyClose() *NakamaPeer_Party_Close {
	if x, ok := x.GetPayload().(*NakamaPeer_Frame_PartyClose); ok {
		return x.PartyClose
	}
	return nil
}

func (x *NakamaPeer_Frame) GetPartyJoinRequestList() *NakamaPeer_Party_JoinRequestList {
	if x, ok := x.GetPayload().(*NakamaPeer_Frame_PartyJoinRequestList); ok {
		return x.PartyJoinRequestList
	}
	return nil
}

func (x *NakamaPeer_Frame) GetPartyMatchmakerAdd() *NakamaPeer_Party_MatchmakerAdd {
	if x, ok := x.GetPayload().(*NakamaPeer_Frame_PartyMatchmakerAdd); ok {
		return x.PartyMatchmakerAdd
	}
	return nil
}

func (x *NakamaPeer_Frame) GetPartyMatchmakerRemove() *NakamaPeer_Party_MatchmakerRemove {
	if x, ok := x.GetPayload().(*NakamaPeer_Frame_PartyMatchmakerRemove); ok {
		return x.PartyMatchmakerRemove
	}
	return nil
}

func (x *NakamaPeer_Frame) GetPartyDataSend() *NakamaPeer_Party_DataSend {
	if x, ok := x.GetPayload().(*NakamaPeer_Frame_PartyDataSend); ok {
		return x.PartyDataSend
	}
	return nil
}

func (x *NakamaPeer_Frame) GetPartyResult() *NakamaPeer_Party_Result {
	if x, ok := x.GetPayload().(*NakamaPeer_Frame_PartyResult); ok {
		return x.PartyResult
	}
	return nil
}

func (x *NakamaPeer_Frame) GetMatchJoin() *NakamaPeer_Match_Join {
	if x, ok := x.GetPayload().(*NakamaPeer_Frame_MatchJoin); ok {
		return x.MatchJoin
	}
	return nil
}

func (x *NakamaPeer_Frame) GetMatchJoinResult() *NakamaPeer_Match_JoinResult {
	if x, ok := x.GetPayload().(*NakamaPeer_Frame_MatchJoinResult); ok {
		return x.MatchJoinResult
	}
	return nil
}

func (x *NakamaPeer_Frame) GetMatchDataSend() *NakamaPeer_Match_SendData {
	if x, ok := x.GetPayload().(*NakamaPeer_Frame_MatchDataSend); ok {
		return x.MatchDataSend
	}
	return nil
}

func (x *NakamaPeer_Frame) GetServiceBroadcast() *NakamaPeer_Envelope {
	if x, ok := x.GetPayload().(*NakamaPeer_Frame_ServiceBroadcast); ok {
		return x.ServiceBroadcast
	}
	return nil
}

type isNakamaPeer_Frame_Payload interface {
	isNakamaPeer_Frame_Payload()
}

type NakamaPeer_Frame_Envelope struct {
	Envelope *NakamaPeer_Envelope `protobuf:"bytes,7,opt,name=envelope,proto3,oneof"`
}

type NakamaPeer_Frame_KickedOut struct {
	KickedOut *NakamaPeer_Envelope `protobuf:"bytes,8,opt,name=kickedOut,proto3,oneof"`
}

type NakamaPeer_Frame_Status struct {
	Status *NakamaPeer_Status `protobuf:"bytes,9,opt,name=status,proto3,oneof"`
}

type NakamaPeer_Frame_Track struct {
	Track *NakamaPeer_Presence `protobuf:"bytes,10,opt,name=track,proto3,oneof"`
}

type NakamaPeer_Frame_Untrack struct {
	Untrack *NakamaPeer_Untrack `protobuf:"bytes,11,opt,name=untrack,proto3,oneof"`
}

type NakamaPeer_Frame_Broadcast struct {
	Broadcast *NakamaPeer_Envelope `protobuf:"bytes,12,opt,name=broadcast,proto3,oneof"`
}

type NakamaPeer_Frame_TrackUpdate struct {
	TrackUpdate *NakamaPeer_Presence `protobuf:"bytes,13,opt,name=trackUpdate,proto3,oneof"`
}

type NakamaPeer_Frame_PartyJoin struct {
	PartyJoin *NakamaPeer_Party_Join `protobuf:"bytes,14,opt,name=partyJoin,proto3,oneof"`
}

type NakamaPeer_Frame_PartyPromote struct {
	PartyPromote *NakamaPeer_Party_Promote `protobuf:"bytes,15,opt,name=partyPromote,proto3,oneof"`
}

type NakamaPeer_Frame_PartyAccept struct {
	PartyAccept *NakamaPeer_Party_Accept `protobuf:"bytes,16,opt,name=partyAccept,proto3,oneof"`
}

type NakamaPeer_Frame_PartyRemove struct {
	PartyRemove *NakamaPeer_Party_Remove `protobuf:"bytes,17,opt,name=partyRemove,proto3,oneof"`
}

type NakamaPeer_Frame_PartyClose struct {
	PartyClose *NakamaPeer_Party_Close `protobuf:"bytes,18,opt,name=partyClose,proto3,oneof"`
}

type NakamaPeer_Frame_PartyJoinRequestList struct {
	PartyJoinRequestList *NakamaPeer_Party_JoinRequestList `protobuf:"bytes,19,opt,name=partyJoinRequestList,proto3,oneof"`
}

type NakamaPeer_Frame_PartyMatchmakerAdd struct {
	PartyMatchmakerAdd *NakamaPeer_Party_MatchmakerAdd `protobuf:"bytes,20,opt,name=partyMatchmakerAdd,proto3,oneof"`
}

type NakamaPeer_Frame_PartyMatchmakerRemove struct {
	PartyMatchmakerRemove *NakamaPeer_Party_MatchmakerRemove `protobuf:"bytes,21,opt,name=partyMatchmakerRemove,proto3,oneof"`
}

type NakamaPeer_Frame_PartyDataSend struct {
	PartyDataSend *NakamaPeer_Party_DataSend `protobuf:"bytes,22,opt,name=partyDataSend,proto3,oneof"`
}

type NakamaPeer_Frame_PartyResult struct {
	PartyResult *NakamaPeer_Party_Result `protobuf:"bytes,23,opt,name=partyResult,proto3,oneof"`
}

type NakamaPeer_Frame_MatchJoin struct {
	MatchJoin *NakamaPeer_Match_Join `protobuf:"bytes,24,opt,name=matchJoin,proto3,oneof"`
}

type NakamaPeer_Frame_MatchJoinResult struct {
	MatchJoinResult *NakamaPeer_Match_JoinResult `protobuf:"bytes,25,opt,name=matchJoinResult,proto3,oneof"`
}

type NakamaPeer_Frame_MatchDataSend struct {
	MatchDataSend *NakamaPeer_Match_SendData `protobuf:"bytes,26,opt,name=matchDataSend,proto3,oneof"`
}

type NakamaPeer_Frame_ServiceBroadcast struct {
	ServiceBroadcast *NakamaPeer_Envelope `protobuf:"bytes,27,opt,name=serviceBroadcast,proto3,oneof"`
}

func (*NakamaPeer_Frame_Envelope) isNakamaPeer_Frame_Payload() {}

func (*NakamaPeer_Frame_KickedOut) isNakamaPeer_Frame_Payload() {}

func (*NakamaPeer_Frame_Status) isNakamaPeer_Frame_Payload() {}

func (*NakamaPeer_Frame_Track) isNakamaPeer_Frame_Payload() {}

func (*NakamaPeer_Frame_Untrack) isNakamaPeer_Frame_Payload() {}

func (*NakamaPeer_Frame_Broadcast) isNakamaPeer_Frame_Payload() {}

func (*NakamaPeer_Frame_TrackUpdate) isNakamaPeer_Frame_Payload() {}

func (*NakamaPeer_Frame_PartyJoin) isNakamaPeer_Frame_Payload() {}

func (*NakamaPeer_Frame_PartyPromote) isNakamaPeer_Frame_Payload() {}

func (*NakamaPeer_Frame_PartyAccept) isNakamaPeer_Frame_Payload() {}

func (*NakamaPeer_Frame_PartyRemove) isNakamaPeer_Frame_Payload() {}

func (*NakamaPeer_Frame_PartyClose) isNakamaPeer_Frame_Payload() {}

func (*NakamaPeer_Frame_PartyJoinRequestList) isNakamaPeer_Frame_Payload() {}

func (*NakamaPeer_Frame_PartyMatchmakerAdd) isNakamaPeer_Frame_Payload() {}

func (*NakamaPeer_Frame_PartyMatchmakerRemove) isNakamaPeer_Frame_Payload() {}

func (*NakamaPeer_Frame_PartyDataSend) isNakamaPeer_Frame_Payload() {}

func (*NakamaPeer_Frame_PartyResult) isNakamaPeer_Frame_Payload() {}

func (*NakamaPeer_Frame_MatchJoin) isNakamaPeer_Frame_Payload() {}

func (*NakamaPeer_Frame_MatchJoinResult) isNakamaPeer_Frame_Payload() {}

func (*NakamaPeer_Frame_MatchDataSend) isNakamaPeer_Frame_Payload() {}

func (*NakamaPeer_Frame_ServiceBroadcast) isNakamaPeer_Frame_Payload() {}

type NakamaPeer_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node      string                 `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	Frames    []*NakamaPeer_Frame    `protobuf:"bytes,2,rep,name=frames,proto3" json:"frames,omitempty"`
	Presences []*NakamaPeer_Presence `protobuf:"bytes,3,rep,name=Presences,proto3" json:"Presences,omitempty"`
}

func (x *NakamaPeer_State) Reset() {
	*x = NakamaPeer_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NakamaPeer_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NakamaPeer_State) ProtoMessage() {}

func (x *NakamaPeer_State) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NakamaPeer_State.ProtoReflect.Descriptor instead.
func (*NakamaPeer_State) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{0, 1}
}

func (x *NakamaPeer_State) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

func (x *NakamaPeer_State) GetFrames() []*NakamaPeer_Frame {
	if x != nil {
		return x.Frames
	}
	return nil
}

func (x *NakamaPeer_State) GetPresences() []*NakamaPeer_Presence {
	if x != nil {
		return x.Presences
	}
	return nil
}

type NakamaPeer_Envelope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Recipient   []string          `protobuf:"bytes,1,rep,name=recipient,proto3" json:"recipient,omitempty"`
	Reason      uint32            `protobuf:"varint,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Context     map[string]string `protobuf:"bytes,3,rep,name=context,proto3" json:"context,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	IsSessionID bool              `protobuf:"varint,4,opt,name=IsSessionID,proto3" json:"IsSessionID,omitempty"`
	// Types that are assignable to Payload:
	//
	//	*NakamaPeer_Envelope_NakamaEnvelope
	//	*NakamaPeer_Envelope_Bytes
	Payload isNakamaPeer_Envelope_Payload `protobuf_oneof:"payload"`
}

func (x *NakamaPeer_Envelope) Reset() {
	*x = NakamaPeer_Envelope{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NakamaPeer_Envelope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NakamaPeer_Envelope) ProtoMessage() {}

func (x *NakamaPeer_Envelope) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NakamaPeer_Envelope.ProtoReflect.Descriptor instead.
func (*NakamaPeer_Envelope) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{0, 2}
}

func (x *NakamaPeer_Envelope) GetRecipient() []string {
	if x != nil {
		return x.Recipient
	}
	return nil
}

func (x *NakamaPeer_Envelope) GetReason() uint32 {
	if x != nil {
		return x.Reason
	}
	return 0
}

func (x *NakamaPeer_Envelope) GetContext() map[string]string {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *NakamaPeer_Envelope) GetIsSessionID() bool {
	if x != nil {
		return x.IsSessionID
	}
	return false
}

func (m *NakamaPeer_Envelope) GetPayload() isNakamaPeer_Envelope_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *NakamaPeer_Envelope) GetNakamaEnvelope() *Envelope {
	if x, ok := x.GetPayload().(*NakamaPeer_Envelope_NakamaEnvelope); ok {
		return x.NakamaEnvelope
	}
	return nil
}

func (x *NakamaPeer_Envelope) GetBytes() []byte {
	if x, ok := x.GetPayload().(*NakamaPeer_Envelope_Bytes); ok {
		return x.Bytes
	}
	return nil
}

type isNakamaPeer_Envelope_Payload interface {
	isNakamaPeer_Envelope_Payload()
}

type NakamaPeer_Envelope_NakamaEnvelope struct {
	NakamaEnvelope *Envelope `protobuf:"bytes,5,opt,name=nakamaEnvelope,proto3,oneof"`
}

type NakamaPeer_Envelope_Bytes struct {
	Bytes []byte `protobuf:"bytes,6,opt,name=bytes,proto3,oneof"`
}

func (*NakamaPeer_Envelope_NakamaEnvelope) isNakamaPeer_Envelope_Payload() {}

func (*NakamaPeer_Envelope_Bytes) isNakamaPeer_Envelope_Payload() {}

type NakamaPeer_Untrack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionID  string                       `protobuf:"bytes,1,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	UserID     string                       `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`
	Stream     []*NakamaPeer_PresenceStream `protobuf:"bytes,3,rep,name=stream,proto3" json:"stream,omitempty"`
	Modes      []uint32                     `protobuf:"varint,4,rep,packed,name=modes,proto3" json:"modes,omitempty"`
	Reason     uint32                       `protobuf:"varint,5,opt,name=reason,proto3" json:"reason,omitempty"`
	SkipStream *NakamaPeer_PresenceStream   `protobuf:"bytes,6,opt,name=skipStream,proto3" json:"skipStream,omitempty"`
}

func (x *NakamaPeer_Untrack) Reset() {
	*x = NakamaPeer_Untrack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NakamaPeer_Untrack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NakamaPeer_Untrack) ProtoMessage() {}

func (x *NakamaPeer_Untrack) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NakamaPeer_Untrack.ProtoReflect.Descriptor instead.
func (*NakamaPeer_Untrack) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{0, 3}
}

func (x *NakamaPeer_Untrack) GetSessionID() string {
	if x != nil {
		return x.SessionID
	}
	return ""
}

func (x *NakamaPeer_Untrack) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *NakamaPeer_Untrack) GetStream() []*NakamaPeer_PresenceStream {
	if x != nil {
		return x.Stream
	}
	return nil
}

func (x *NakamaPeer_Untrack) GetModes() []uint32 {
	if x != nil {
		return x.Modes
	}
	return nil
}

func (x *NakamaPeer_Untrack) GetReason() uint32 {
	if x != nil {
		return x.Reason
	}
	return 0
}

func (x *NakamaPeer_Untrack) GetSkipStream() *NakamaPeer_PresenceStream {
	if x != nil {
		return x.SkipStream
	}
	return nil
}

type NakamaPeer_Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Health         int32   `protobuf:"varint,2,opt,name=health,proto3" json:"health,omitempty"`
	SessionCount   int32   `protobuf:"varint,3,opt,name=sessionCount,proto3" json:"sessionCount,omitempty"`
	PresenceCount  int32   `protobuf:"varint,4,opt,name=presenceCount,proto3" json:"presenceCount,omitempty"`
	MatchCount     int32   `protobuf:"varint,5,opt,name=matchCount,proto3" json:"matchCount,omitempty"`
	GoroutineCount int32   `protobuf:"varint,6,opt,name=goroutineCount,proto3" json:"goroutineCount,omitempty"`
	AvgLatencyMs   float64 `protobuf:"fixed64,7,opt,name=avgLatencyMs,proto3" json:"avgLatencyMs,omitempty"`
	AvgRateSec     float64 `protobuf:"fixed64,8,opt,name=avgRateSec,proto3" json:"avgRateSec,omitempty"`
	AvgInputKbs    float64 `protobuf:"fixed64,9,opt,name=avgInputKbs,proto3" json:"avgInputKbs,omitempty"`
	AvgOutputKbs   float64 `protobuf:"fixed64,10,opt,name=avgOutputKbs,proto3" json:"avgOutputKbs,omitempty"`
}

func (x *NakamaPeer_Status) Reset() {
	*x = NakamaPeer_Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NakamaPeer_Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NakamaPeer_Status) ProtoMessage() {}

func (x *NakamaPeer_Status) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NakamaPeer_Status.ProtoReflect.Descriptor instead.
func (*NakamaPeer_Status) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{0, 4}
}

func (x *NakamaPeer_Status) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NakamaPeer_Status) GetHealth() int32 {
	if x != nil {
		return x.Health
	}
	return 0
}

func (x *NakamaPeer_Status) GetSessionCount() int32 {
	if x != nil {
		return x.SessionCount
	}
	return 0
}

func (x *NakamaPeer_Status) GetPresenceCount() int32 {
	if x != nil {
		return x.PresenceCount
	}
	return 0
}

func (x *NakamaPeer_Status) GetMatchCount() int32 {
	if x != nil {
		return x.MatchCount
	}
	return 0
}

func (x *NakamaPeer_Status) GetGoroutineCount() int32 {
	if x != nil {
		return x.GoroutineCount
	}
	return 0
}

func (x *NakamaPeer_Status) GetAvgLatencyMs() float64 {
	if x != nil {
		return x.AvgLatencyMs
	}
	return 0
}

func (x *NakamaPeer_Status) GetAvgRateSec() float64 {
	if x != nil {
		return x.AvgRateSec
	}
	return 0
}

func (x *NakamaPeer_Status) GetAvgInputKbs() float64 {
	if x != nil {
		return x.AvgInputKbs
	}
	return 0
}

func (x *NakamaPeer_Status) GetAvgOutputKbs() float64 {
	if x != nil {
		return x.AvgOutputKbs
	}
	return 0
}

type NakamaPeer_PresenceID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionID string `protobuf:"bytes,1,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	Node      string `protobuf:"bytes,2,opt,name=node,proto3" json:"node,omitempty"`
}

func (x *NakamaPeer_PresenceID) Reset() {
	*x = NakamaPeer_PresenceID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NakamaPeer_PresenceID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NakamaPeer_PresenceID) ProtoMessage() {}

func (x *NakamaPeer_PresenceID) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NakamaPeer_PresenceID.ProtoReflect.Descriptor instead.
func (*NakamaPeer_PresenceID) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{0, 5}
}

func (x *NakamaPeer_PresenceID) GetSessionID() string {
	if x != nil {
		return x.SessionID
	}
	return ""
}

func (x *NakamaPeer_PresenceID) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

type NakamaPeer_Presence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionID              string                       `protobuf:"bytes,1,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	UserID                 string                       `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`
	Stream                 []*NakamaPeer_PresenceStream `protobuf:"bytes,3,rep,name=stream,proto3" json:"stream,omitempty"`
	Meta                   []*NakamaPeer_PresenceMeta   `protobuf:"bytes,4,rep,name=meta,proto3" json:"meta,omitempty"`
	AllowIfFirstForSession bool                         `protobuf:"varint,5,opt,name=allowIfFirstForSession,proto3" json:"allowIfFirstForSession,omitempty"`
}

func (x *NakamaPeer_Presence) Reset() {
	*x = NakamaPeer_Presence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NakamaPeer_Presence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NakamaPeer_Presence) ProtoMessage() {}

func (x *NakamaPeer_Presence) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NakamaPeer_Presence.ProtoReflect.Descriptor instead.
func (*NakamaPeer_Presence) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{0, 6}
}

func (x *NakamaPeer_Presence) GetSessionID() string {
	if x != nil {
		return x.SessionID
	}
	return ""
}

func (x *NakamaPeer_Presence) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *NakamaPeer_Presence) GetStream() []*NakamaPeer_PresenceStream {
	if x != nil {
		return x.Stream
	}
	return nil
}

func (x *NakamaPeer_Presence) GetMeta() []*NakamaPeer_PresenceMeta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *NakamaPeer_Presence) GetAllowIfFirstForSession() bool {
	if x != nil {
		return x.AllowIfFirstForSession
	}
	return false
}

type NakamaPeer_PresenceStream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode       uint32 `protobuf:"varint,1,opt,name=mode,proto3" json:"mode,omitempty"`
	Subject    string `protobuf:"bytes,2,opt,name=subject,proto3" json:"subject,omitempty"`
	Subcontext string `protobuf:"bytes,3,opt,name=subcontext,proto3" json:"subcontext,omitempty"`
	Label      string `protobuf:"bytes,4,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *NakamaPeer_PresenceStream) Reset() {
	*x = NakamaPeer_PresenceStream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NakamaPeer_PresenceStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NakamaPeer_PresenceStream) ProtoMessage() {}

func (x *NakamaPeer_PresenceStream) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NakamaPeer_PresenceStream.ProtoReflect.Descriptor instead.
func (*NakamaPeer_PresenceStream) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{0, 7}
}

func (x *NakamaPeer_PresenceStream) GetMode() uint32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

func (x *NakamaPeer_PresenceStream) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *NakamaPeer_PresenceStream) GetSubcontext() string {
	if x != nil {
		return x.Subcontext
	}
	return ""
}

func (x *NakamaPeer_PresenceStream) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

type NakamaPeer_PresenceMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionFormat uint32 `protobuf:"varint,1,opt,name=sessionFormat,proto3" json:"sessionFormat,omitempty"`
	Hidden        bool   `protobuf:"varint,2,opt,name=hidden,proto3" json:"hidden,omitempty"`
	Persistence   bool   `protobuf:"varint,3,opt,name=persistence,proto3" json:"persistence,omitempty"`
	Username      string `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`
	Status        string `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	Reason        uint32 `protobuf:"varint,6,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *NakamaPeer_PresenceMeta) Reset() {
	*x = NakamaPeer_PresenceMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NakamaPeer_PresenceMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NakamaPeer_PresenceMeta) ProtoMessage() {}

func (x *NakamaPeer_PresenceMeta) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NakamaPeer_PresenceMeta.ProtoReflect.Descriptor instead.
func (*NakamaPeer_PresenceMeta) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{0, 8}
}

func (x *NakamaPeer_PresenceMeta) GetSessionFormat() uint32 {
	if x != nil {
		return x.SessionFormat
	}
	return 0
}

func (x *NakamaPeer_PresenceMeta) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

func (x *NakamaPeer_PresenceMeta) GetPersistence() bool {
	if x != nil {
		return x.Persistence
	}
	return false
}

func (x *NakamaPeer_PresenceMeta) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *NakamaPeer_PresenceMeta) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *NakamaPeer_PresenceMeta) GetReason() uint32 {
	if x != nil {
		return x.Reason
	}
	return 0
}

type NakamaPeer_NodeMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Vars  map[string]string `protobuf:"bytes,2,rep,name=vars,proto3" json:"vars,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Ip    string            `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
	Port  uint32            `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	Role  string            `protobuf:"bytes,5,opt,name=role,proto3" json:"role,omitempty"`
	IsNew bool              `protobuf:"varint,6,opt,name=isNew,proto3" json:"isNew,omitempty"`
}

func (x *NakamaPeer_NodeMeta) Reset() {
	*x = NakamaPeer_NodeMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NakamaPeer_NodeMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NakamaPeer_NodeMeta) ProtoMessage() {}

func (x *NakamaPeer_NodeMeta) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NakamaPeer_NodeMeta.ProtoReflect.Descriptor instead.
func (*NakamaPeer_NodeMeta) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{0, 9}
}

func (x *NakamaPeer_NodeMeta) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NakamaPeer_NodeMeta) GetVars() map[string]string {
	if x != nil {
		return x.Vars
	}
	return nil
}

func (x *NakamaPeer_NodeMeta) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *NakamaPeer_NodeMeta) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *NakamaPeer_NodeMeta) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *NakamaPeer_NodeMeta) GetIsNew() bool {
	if x != nil {
		return x.IsNew
	}
	return false
}

type NakamaPeer_Party struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NakamaPeer_Party) Reset() {
	*x = NakamaPeer_Party{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NakamaPeer_Party) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NakamaPeer_Party) ProtoMessage() {}

func (x *NakamaPeer_Party) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NakamaPeer_Party.ProtoReflect.Descriptor instead.
func (*NakamaPeer_Party) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{0, 10}
}

type NakamaPeer_Match struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NakamaPeer_Match) Reset() {
	*x = NakamaPeer_Match{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NakamaPeer_Match) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NakamaPeer_Match) ProtoMessage() {}

func (x *NakamaPeer_Match) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NakamaPeer_Match.ProtoReflect.Descriptor instead.
func (*NakamaPeer_Match) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{0, 11}
}

type NakamaPeer_Party_Join struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string                     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SessionID string                     `protobuf:"bytes,2,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	UserID    string                     `protobuf:"bytes,3,opt,name=userID,proto3" json:"userID,omitempty"`
	Stream    *NakamaPeer_PresenceStream `protobuf:"bytes,4,opt,name=stream,proto3" json:"stream,omitempty"`
	Meta      *NakamaPeer_PresenceMeta   `protobuf:"bytes,5,opt,name=meta,proto3" json:"meta,omitempty"`
}

func (x *NakamaPeer_Party_Join) Reset() {
	*x = NakamaPeer_Party_Join{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NakamaPeer_Party_Join) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NakamaPeer_Party_Join) ProtoMessage() {}

func (x *NakamaPeer_Party_Join) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NakamaPeer_Party_Join.ProtoReflect.Descriptor instead.
func (*NakamaPeer_Party_Join) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{0, 10, 0}
}

func (x *NakamaPeer_Party_Join) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NakamaPeer_Party_Join) GetSessionID() string {
	if x != nil {
		return x.SessionID
	}
	return ""
}

func (x *NakamaPeer_Party_Join) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *NakamaPeer_Party_Join) GetStream() *NakamaPeer_PresenceStream {
	if x != nil {
		return x.Stream
	}
	return nil
}

func (x *NakamaPeer_Party_Join) GetMeta() *NakamaPeer_PresenceMeta {
	if x != nil {
		return x.Meta
	}
	return nil
}

type NakamaPeer_Party_Promote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Presence  *UserPresence `protobuf:"bytes,1,opt,name=presence,proto3" json:"presence,omitempty"`
	SessionID string        `protobuf:"bytes,2,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	Id        string        `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *NakamaPeer_Party_Promote) Reset() {
	*x = NakamaPeer_Party_Promote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NakamaPeer_Party_Promote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NakamaPeer_Party_Promote) ProtoMessage() {}

func (x *NakamaPeer_Party_Promote) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NakamaPeer_Party_Promote.ProtoReflect.Descriptor instead.
func (*NakamaPeer_Party_Promote) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{0, 10, 1}
}

func (x *NakamaPeer_Party_Promote) GetPresence() *UserPresence {
	if x != nil {
		return x.Presence
	}
	return nil
}

func (x *NakamaPeer_Party_Promote) GetSessionID() string {
	if x != nil {
		return x.SessionID
	}
	return ""
}

func (x *NakamaPeer_Party_Promote) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type NakamaPeer_Party_Accept struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Presence  *UserPresence `protobuf:"bytes,1,opt,name=presence,proto3" json:"presence,omitempty"`
	SessionID string        `protobuf:"bytes,2,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	Id        string        `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *NakamaPeer_Party_Accept) Reset() {
	*x = NakamaPeer_Party_Accept{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NakamaPeer_Party_Accept) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NakamaPeer_Party_Accept) ProtoMessage() {}

func (x *NakamaPeer_Party_Accept) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NakamaPeer_Party_Accept.ProtoReflect.Descriptor instead.
func (*NakamaPeer_Party_Accept) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{0, 10, 2}
}

func (x *NakamaPeer_Party_Accept) GetPresence() *UserPresence {
	if x != nil {
		return x.Presence
	}
	return nil
}

func (x *NakamaPeer_Party_Accept) GetSessionID() string {
	if x != nil {
		return x.SessionID
	}
	return ""
}

func (x *NakamaPeer_Party_Accept) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type NakamaPeer_Party_Remove struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Presence  *UserPresence `protobuf:"bytes,1,opt,name=presence,proto3" json:"presence,omitempty"`
	SessionID string        `protobuf:"bytes,2,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	Id        string        `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *NakamaPeer_Party_Remove) Reset() {
	*x = NakamaPeer_Party_Remove{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NakamaPeer_Party_Remove) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NakamaPeer_Party_Remove) ProtoMessage() {}

func (x *NakamaPeer_Party_Remove) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NakamaPeer_Party_Remove.ProtoReflect.Descriptor instead.
func (*NakamaPeer_Party_Remove) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{0, 10, 3}
}

func (x *NakamaPeer_Party_Remove) GetPresence() *UserPresence {
	if x != nil {
		return x.Presence
	}
	return nil
}

func (x *NakamaPeer_Party_Remove) GetSessionID() string {
	if x != nil {
		return x.SessionID
	}
	return ""
}

func (x *NakamaPeer_Party_Remove) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type NakamaPeer_Party_Close struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionID string `protobuf:"bytes,1,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	Id        string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *NakamaPeer_Party_Close) Reset() {
	*x = NakamaPeer_Party_Close{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NakamaPeer_Party_Close) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NakamaPeer_Party_Close) ProtoMessage() {}

func (x *NakamaPeer_Party_Close) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NakamaPeer_Party_Close.ProtoReflect.Descriptor instead.
func (*NakamaPeer_Party_Close) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{0, 10, 4}
}

func (x *NakamaPeer_Party_Close) GetSessionID() string {
	if x != nil {
		return x.SessionID
	}
	return ""
}

func (x *NakamaPeer_Party_Close) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type NakamaPeer_Party_JoinRequestList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionID string `protobuf:"bytes,1,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	Id        string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *NakamaPeer_Party_JoinRequestList) Reset() {
	*x = NakamaPeer_Party_JoinRequestList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NakamaPeer_Party_JoinRequestList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NakamaPeer_Party_JoinRequestList) ProtoMessage() {}

func (x *NakamaPeer_Party_JoinRequestList) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NakamaPeer_Party_JoinRequestList.ProtoReflect.Descriptor instead.
func (*NakamaPeer_Party_JoinRequestList) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{0, 10, 5}
}

func (x *NakamaPeer_Party_JoinRequestList) GetSessionID() string {
	if x != nil {
		return x.SessionID
	}
	return ""
}

func (x *NakamaPeer_Party_JoinRequestList) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type NakamaPeer_Party_MatchmakerAdd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionID         string             `protobuf:"bytes,1,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	Id                string             `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Query             string             `protobuf:"bytes,3,opt,name=query,proto3" json:"query,omitempty"`
	MinCount          int32              `protobuf:"varint,4,opt,name=minCount,proto3" json:"minCount,omitempty"`
	MaxCount          int32              `protobuf:"varint,5,opt,name=maxCount,proto3" json:"maxCount,omitempty"`
	CountMultiple     int32              `protobuf:"varint,6,opt,name=countMultiple,proto3" json:"countMultiple,omitempty"`
	StringProperties  map[string]string  `protobuf:"bytes,7,rep,name=stringProperties,proto3" json:"stringProperties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	NumericProperties map[string]float64 `protobuf:"bytes,8,rep,name=numericProperties,proto3" json:"numericProperties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
}

func (x *NakamaPeer_Party_MatchmakerAdd) Reset() {
	*x = NakamaPeer_Party_MatchmakerAdd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NakamaPeer_Party_MatchmakerAdd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NakamaPeer_Party_MatchmakerAdd) ProtoMessage() {}

func (x *NakamaPeer_Party_MatchmakerAdd) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NakamaPeer_Party_MatchmakerAdd.ProtoReflect.Descriptor instead.
func (*NakamaPeer_Party_MatchmakerAdd) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{0, 10, 6}
}

func (x *NakamaPeer_Party_MatchmakerAdd) GetSessionID() string {
	if x != nil {
		return x.SessionID
	}
	return ""
}

func (x *NakamaPeer_Party_MatchmakerAdd) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NakamaPeer_Party_MatchmakerAdd) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *NakamaPeer_Party_MatchmakerAdd) GetMinCount() int32 {
	if x != nil {
		return x.MinCount
	}
	return 0
}

func (x *NakamaPeer_Party_MatchmakerAdd) GetMaxCount() int32 {
	if x != nil {
		return x.MaxCount
	}
	return 0
}

func (x *NakamaPeer_Party_MatchmakerAdd) GetCountMultiple() int32 {
	if x != nil {
		return x.CountMultiple
	}
	return 0
}

func (x *NakamaPeer_Party_MatchmakerAdd) GetStringProperties() map[string]string {
	if x != nil {
		return x.StringProperties
	}
	return nil
}

func (x *NakamaPeer_Party_MatchmakerAdd) GetNumericProperties() map[string]float64 {
	if x != nil {
		return x.NumericProperties
	}
	return nil
}

type NakamaPeer_Party_MatchmakerRemove struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionID string `protobuf:"bytes,1,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	Id        string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Ticket    string `protobuf:"bytes,3,opt,name=ticket,proto3" json:"ticket,omitempty"`
}

func (x *NakamaPeer_Party_MatchmakerRemove) Reset() {
	*x = NakamaPeer_Party_MatchmakerRemove{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NakamaPeer_Party_MatchmakerRemove) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NakamaPeer_Party_MatchmakerRemove) ProtoMessage() {}

func (x *NakamaPeer_Party_MatchmakerRemove) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NakamaPeer_Party_MatchmakerRemove.ProtoReflect.Descriptor instead.
func (*NakamaPeer_Party_MatchmakerRemove) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{0, 10, 7}
}

func (x *NakamaPeer_Party_MatchmakerRemove) GetSessionID() string {
	if x != nil {
		return x.SessionID
	}
	return ""
}

func (x *NakamaPeer_Party_MatchmakerRemove) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NakamaPeer_Party_MatchmakerRemove) GetTicket() string {
	if x != nil {
		return x.Ticket
	}
	return ""
}

type NakamaPeer_Party_DataSend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionID string `protobuf:"bytes,1,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	Id        string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	OpCode    int64  `protobuf:"varint,3,opt,name=opCode,proto3" json:"opCode,omitempty"`
	Data      []byte `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *NakamaPeer_Party_DataSend) Reset() {
	*x = NakamaPeer_Party_DataSend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NakamaPeer_Party_DataSend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NakamaPeer_Party_DataSend) ProtoMessage() {}

func (x *NakamaPeer_Party_DataSend) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NakamaPeer_Party_DataSend.ProtoReflect.Descriptor instead.
func (*NakamaPeer_Party_DataSend) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{0, 10, 8}
}

func (x *NakamaPeer_Party_DataSend) GetSessionID() string {
	if x != nil {
		return x.SessionID
	}
	return ""
}

func (x *NakamaPeer_Party_DataSend) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NakamaPeer_Party_DataSend) GetOpCode() int64 {
	if x != nil {
		return x.OpCode
	}
	return 0
}

func (x *NakamaPeer_Party_DataSend) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type NakamaPeer_Party_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code         int32                    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Ok           bool                     `protobuf:"varint,2,opt,name=ok,proto3" json:"ok,omitempty"`
	ErrMsg       string                   `protobuf:"bytes,3,opt,name=errMsg,proto3" json:"errMsg,omitempty"`
	UserPresence []*UserPresence          `protobuf:"bytes,4,rep,name=userPresence,proto3" json:"userPresence,omitempty"`
	StringValue  string                   `protobuf:"bytes,5,opt,name=stringValue,proto3" json:"stringValue,omitempty"`
	PresenceID   []*NakamaPeer_PresenceID `protobuf:"bytes,6,rep,name=presenceID,proto3" json:"presenceID,omitempty"`
}

func (x *NakamaPeer_Party_Result) Reset() {
	*x = NakamaPeer_Party_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NakamaPeer_Party_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NakamaPeer_Party_Result) ProtoMessage() {}

func (x *NakamaPeer_Party_Result) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NakamaPeer_Party_Result.ProtoReflect.Descriptor instead.
func (*NakamaPeer_Party_Result) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{0, 10, 9}
}

func (x *NakamaPeer_Party_Result) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *NakamaPeer_Party_Result) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *NakamaPeer_Party_Result) GetErrMsg() string {
	if x != nil {
		return x.ErrMsg
	}
	return ""
}

func (x *NakamaPeer_Party_Result) GetUserPresence() []*UserPresence {
	if x != nil {
		return x.UserPresence
	}
	return nil
}

func (x *NakamaPeer_Party_Result) GetStringValue() string {
	if x != nil {
		return x.StringValue
	}
	return ""
}

func (x *NakamaPeer_Party_Result) GetPresenceID() []*NakamaPeer_PresenceID {
	if x != nil {
		return x.PresenceID
	}
	return nil
}

type NakamaPeer_Match_MatchPresence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node      string `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	UserID    string `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`
	SessionID string `protobuf:"bytes,3,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	Username  string `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`
	Reason    uint32 `protobuf:"varint,5,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *NakamaPeer_Match_MatchPresence) Reset() {
	*x = NakamaPeer_Match_MatchPresence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NakamaPeer_Match_MatchPresence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NakamaPeer_Match_MatchPresence) ProtoMessage() {}

func (x *NakamaPeer_Match_MatchPresence) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NakamaPeer_Match_MatchPresence.ProtoReflect.Descriptor instead.
func (*NakamaPeer_Match_MatchPresence) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{0, 11, 0}
}

func (x *NakamaPeer_Match_MatchPresence) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

func (x *NakamaPeer_Match_MatchPresence) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *NakamaPeer_Match_MatchPresence) GetSessionID() string {
	if x != nil {
		return x.SessionID
	}
	return ""
}

func (x *NakamaPeer_Match_MatchPresence) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *NakamaPeer_Match_MatchPresence) GetReason() uint32 {
	if x != nil {
		return x.Reason
	}
	return 0
}

type NakamaPeer_Match_Join struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserID        string            `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`
	SessionID     string            `protobuf:"bytes,3,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	Username      string            `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`
	SessionExpiry int64             `protobuf:"varint,5,opt,name=sessionExpiry,proto3" json:"sessionExpiry,omitempty"`
	Vars          map[string]string `protobuf:"bytes,6,rep,name=vars,proto3" json:"vars,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ClientIP      string            `protobuf:"bytes,7,opt,name=clientIP,proto3" json:"clientIP,omitempty"`
	ClientPort    string            `protobuf:"bytes,8,opt,name=clientPort,proto3" json:"clientPort,omitempty"`
	Metadata      map[string]string `protobuf:"bytes,9,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *NakamaPeer_Match_Join) Reset() {
	*x = NakamaPeer_Match_Join{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NakamaPeer_Match_Join) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NakamaPeer_Match_Join) ProtoMessage() {}

func (x *NakamaPeer_Match_Join) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NakamaPeer_Match_Join.ProtoReflect.Descriptor instead.
func (*NakamaPeer_Match_Join) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{0, 11, 1}
}

func (x *NakamaPeer_Match_Join) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NakamaPeer_Match_Join) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *NakamaPeer_Match_Join) GetSessionID() string {
	if x != nil {
		return x.SessionID
	}
	return ""
}

func (x *NakamaPeer_Match_Join) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *NakamaPeer_Match_Join) GetSessionExpiry() int64 {
	if x != nil {
		return x.SessionExpiry
	}
	return 0
}

func (x *NakamaPeer_Match_Join) GetVars() map[string]string {
	if x != nil {
		return x.Vars
	}
	return nil
}

func (x *NakamaPeer_Match_Join) GetClientIP() string {
	if x != nil {
		return x.ClientIP
	}
	return ""
}

func (x *NakamaPeer_Match_Join) GetClientPort() string {
	if x != nil {
		return x.ClientPort
	}
	return ""
}

func (x *NakamaPeer_Match_Join) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type NakamaPeer_Match_JoinResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Found         bool                              `protobuf:"varint,1,opt,name=found,proto3" json:"found,omitempty"`
	Allow         bool                              `protobuf:"varint,2,opt,name=allow,proto3" json:"allow,omitempty"`
	IsNew         bool                              `protobuf:"varint,3,opt,name=isNew,proto3" json:"isNew,omitempty"`
	Reason        string                            `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"`
	Label         string                            `protobuf:"bytes,5,opt,name=label,proto3" json:"label,omitempty"`
	MatchPresence []*NakamaPeer_Match_MatchPresence `protobuf:"bytes,6,rep,name=matchPresence,proto3" json:"matchPresence,omitempty"`
}

func (x *NakamaPeer_Match_JoinResult) Reset() {
	*x = NakamaPeer_Match_JoinResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NakamaPeer_Match_JoinResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NakamaPeer_Match_JoinResult) ProtoMessage() {}

func (x *NakamaPeer_Match_JoinResult) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NakamaPeer_Match_JoinResult.ProtoReflect.Descriptor instead.
func (*NakamaPeer_Match_JoinResult) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{0, 11, 2}
}

func (x *NakamaPeer_Match_JoinResult) GetFound() bool {
	if x != nil {
		return x.Found
	}
	return false
}

func (x *NakamaPeer_Match_JoinResult) GetAllow() bool {
	if x != nil {
		return x.Allow
	}
	return false
}

func (x *NakamaPeer_Match_JoinResult) GetIsNew() bool {
	if x != nil {
		return x.IsNew
	}
	return false
}

func (x *NakamaPeer_Match_JoinResult) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *NakamaPeer_Match_JoinResult) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *NakamaPeer_Match_JoinResult) GetMatchPresence() []*NakamaPeer_Match_MatchPresence {
	if x != nil {
		return x.MatchPresence
	}
	return nil
}

type NakamaPeer_Match_ListMatches struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NakamaPeer_Match_ListMatches) Reset() {
	*x = NakamaPeer_Match_ListMatches{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NakamaPeer_Match_ListMatches) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NakamaPeer_Match_ListMatches) ProtoMessage() {}

func (x *NakamaPeer_Match_ListMatches) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NakamaPeer_Match_ListMatches.ProtoReflect.Descriptor instead.
func (*NakamaPeer_Match_ListMatches) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{0, 11, 3}
}

type NakamaPeer_Match_SendData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserID      string `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`
	SessionID   string `protobuf:"bytes,3,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	Username    string `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`
	OpCode      int64  `protobuf:"varint,5,opt,name=opCode,proto3" json:"opCode,omitempty"`
	Data        []byte `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
	Reliable    bool   `protobuf:"varint,7,opt,name=reliable,proto3" json:"reliable,omitempty"`
	ReceiveTime int64  `protobuf:"varint,8,opt,name=receiveTime,proto3" json:"receiveTime,omitempty"`
}

func (x *NakamaPeer_Match_SendData) Reset() {
	*x = NakamaPeer_Match_SendData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NakamaPeer_Match_SendData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NakamaPeer_Match_SendData) ProtoMessage() {}

func (x *NakamaPeer_Match_SendData) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NakamaPeer_Match_SendData.ProtoReflect.Descriptor instead.
func (*NakamaPeer_Match_SendData) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{0, 11, 4}
}

func (x *NakamaPeer_Match_SendData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NakamaPeer_Match_SendData) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *NakamaPeer_Match_SendData) GetSessionID() string {
	if x != nil {
		return x.SessionID
	}
	return ""
}

func (x *NakamaPeer_Match_SendData) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *NakamaPeer_Match_SendData) GetOpCode() int64 {
	if x != nil {
		return x.OpCode
	}
	return 0
}

func (x *NakamaPeer_Match_SendData) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *NakamaPeer_Match_SendData) GetReliable() bool {
	if x != nil {
		return x.Reliable
	}
	return false
}

func (x *NakamaPeer_Match_SendData) GetReceiveTime() int64 {
	if x != nil {
		return x.ReceiveTime
	}
	return 0
}

type NakamaPeer_Match_Signal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NakamaPeer_Match_Signal) Reset() {
	*x = NakamaPeer_Match_Signal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NakamaPeer_Match_Signal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NakamaPeer_Match_Signal) ProtoMessage() {}

func (x *NakamaPeer_Match_Signal) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NakamaPeer_Match_Signal.ProtoReflect.Descriptor instead.
func (*NakamaPeer_Match_Signal) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{0, 11, 5}
}

type NakamaPeer_Match_GetState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NakamaPeer_Match_GetState) Reset() {
	*x = NakamaPeer_Match_GetState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NakamaPeer_Match_GetState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NakamaPeer_Match_GetState) ProtoMessage() {}

func (x *NakamaPeer_Match_GetState) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NakamaPeer_Match_GetState.ProtoReflect.Descriptor instead.
func (*NakamaPeer_Match_GetState) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{0, 11, 6}
}

var File_peer_proto protoreflect.FileDescriptor

var file_peer_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x6e, 0x61,
	0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x72, 0x65, 0x61, 0x6c,
	0x74, 0x69, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb8, 0x33, 0x0a, 0x0a, 0x4e,
	0x61, 0x6b, 0x61, 0x6d, 0x61, 0x50, 0x65, 0x65, 0x72, 0x1a, 0xf5, 0x0e, 0x0a, 0x05, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x62, 0x6f, 0x78,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x32, 0x0a, 0x06, 0x67, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x06, 0x67, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x12, 0x47, 0x0a, 0x08, 0x69, 0x6e, 0x66,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6e, 0x61,
	0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6b, 0x61, 0x6d, 0x61,
	0x50, 0x65, 0x65, 0x72, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x49, 0x6e, 0x66, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x69, 0x6e, 0x66, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x12, 0x3e, 0x0a, 0x08, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x70, 0x65,
	0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x50, 0x65, 0x65, 0x72, 0x2e, 0x45, 0x6e,
	0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x48, 0x00, 0x52, 0x08, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f,
	0x70, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x6b, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x70,
	0x65, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x50, 0x65, 0x65, 0x72, 0x2e, 0x45,
	0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x48, 0x00, 0x52, 0x09, 0x6b, 0x69, 0x63, 0x6b, 0x65,
	0x64, 0x4f, 0x75, 0x74, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x70, 0x65,
	0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x50, 0x65, 0x65, 0x72, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x38,
	0x0a, 0x05, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6b, 0x61,
	0x6d, 0x61, 0x50, 0x65, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x48,
	0x00, 0x52, 0x05, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x3b, 0x0a, 0x07, 0x75, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x61, 0x6b, 0x61,
	0x6d, 0x61, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x50, 0x65,
	0x65, 0x72, 0x2e, 0x55, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x07, 0x75, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x40, 0x0a, 0x09, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d,
	0x61, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x50, 0x65, 0x65,
	0x72, 0x2e, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x48, 0x00, 0x52, 0x09, 0x62, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6e,
	0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6b, 0x61, 0x6d,
	0x61, 0x50, 0x65, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x00,
	0x52, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a,
	0x09, 0x70, 0x61, 0x72, 0x74, 0x79, 0x4a, 0x6f, 0x69, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x4e,
	0x61, 0x6b, 0x61, 0x6d, 0x61, 0x50, 0x65, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x2e,
	0x4a, 0x6f, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x79, 0x4a, 0x6f, 0x69,
	0x6e, 0x12, 0x4b, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61,
	0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x50, 0x65, 0x65, 0x72,
	0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x48, 0x00,
	0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x12, 0x48,
	0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x79, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x70, 0x65, 0x65,
	0x72, 0x2e, 0x4e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x50, 0x65, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x12, 0x48, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6b, 0x61,
	0x6d, 0x61, 0x50, 0x65, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x12, 0x45, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x79, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e,
	0x70, 0x65, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x50, 0x65, 0x65, 0x72, 0x2e,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x63, 0x0a, 0x14, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61,
	0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x50, 0x65, 0x65, 0x72,
	0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x14, 0x70, 0x61, 0x72, 0x74, 0x79, 0x4a,
	0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x5d,
	0x0a, 0x12, 0x70, 0x61, 0x72, 0x74, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x65,
	0x72, 0x41, 0x64, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6e, 0x61, 0x6b,
	0x61, 0x6d, 0x61, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x50,
	0x65, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d,
	0x61, 0x6b, 0x65, 0x72, 0x41, 0x64, 0x64, 0x48, 0x00, 0x52, 0x12, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x41, 0x64, 0x64, 0x12, 0x66, 0x0a,
	0x15, 0x70, 0x61, 0x72, 0x74, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x65, 0x72,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6e,
	0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6b, 0x61, 0x6d,
	0x61, 0x50, 0x65, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x48, 0x00, 0x52, 0x15,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x4e, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x79, 0x44, 0x61,
	0x74, 0x61, 0x53, 0x65, 0x6e, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6e,
	0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6b, 0x61, 0x6d,
	0x61, 0x50, 0x65, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x53, 0x65, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x79, 0x44, 0x61, 0x74,
	0x61, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x48, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6e, 0x61, 0x6b,
	0x61, 0x6d, 0x61, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x50,
	0x65, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x48, 0x00, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x42, 0x0a, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x69, 0x6e, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x70, 0x65, 0x65, 0x72,
	0x2e, 0x4e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x50, 0x65, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x4a,
	0x6f, 0x69, 0x6e, 0x12, 0x54, 0x0a, 0x0f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x69, 0x6e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6e,
	0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6b, 0x61, 0x6d,
	0x61, 0x50, 0x65, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x4a, 0x6f, 0x69, 0x6e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x4a,
	0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4e, 0x0a, 0x0d, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x6e, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x4e,
	0x61, 0x6b, 0x61, 0x6d, 0x61, 0x50, 0x65, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x2e,
	0x53, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0d, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x4e, 0x0a, 0x10, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x70, 0x65, 0x65,
	0x72, 0x2e, 0x4e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x50, 0x65, 0x65, 0x72, 0x2e, 0x45, 0x6e, 0x76,
	0x65, 0x6c, 0x6f, 0x70, 0x65, 0x48, 0x00, 0x52, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x1a, 0x3b, 0x0a, 0x0d, 0x49, 0x6e, 0x66,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x1a, 0x92, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12,
	0x35, 0x0a, 0x06, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x4e, 0x61,
	0x6b, 0x61, 0x6d, 0x61, 0x50, 0x65, 0x65, 0x72, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x06,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x09, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6e, 0x61, 0x6b, 0x61,
	0x6d, 0x61, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x50, 0x65,
	0x65, 0x72, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x50, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x1a, 0xcf, 0x02, 0x0a, 0x08, 0x45, 0x6e, 0x76, 0x65, 0x6c,
	0x6f, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6e, 0x61, 0x6b,
	0x61, 0x6d, 0x61, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x50,
	0x65, 0x65, 0x72, 0x2e, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x73, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x49, 0x73, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x12, 0x43, 0x0a, 0x0e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x45, 0x6e,
	0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6e,
	0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x45,
	0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x6e, 0x61, 0x6b, 0x61, 0x6d,
	0x61, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x05, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x09, 0x0a,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0xf5, 0x01, 0x0a, 0x07, 0x55, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x3e, 0x0a, 0x06, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6e, 0x61, 0x6b,
	0x61, 0x6d, 0x61, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x50,
	0x65, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f,
	0x64, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x0a, 0x73, 0x6b, 0x69, 0x70,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6e,
	0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6b, 0x61, 0x6d,
	0x61, 0x50, 0x65, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x0a, 0x73, 0x6b, 0x69, 0x70, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x1a, 0xd0, 0x02, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x26, 0x0a, 0x0e, 0x67, 0x6f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x67, 0x6f, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x76, 0x67,
	0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0c, 0x61, 0x76, 0x67, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x61, 0x76, 0x67, 0x52, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0a, 0x61, 0x76, 0x67, 0x52, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x12, 0x20, 0x0a,
	0x0b, 0x61, 0x76, 0x67, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4b, 0x62, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0b, 0x61, 0x76, 0x67, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4b, 0x62, 0x73, 0x12,
	0x22, 0x0a, 0x0c, 0x61, 0x76, 0x67, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4b, 0x62, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x61, 0x76, 0x67, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x4b, 0x62, 0x73, 0x1a, 0x3e, 0x0a, 0x0a, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x49,
	0x44, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x6f, 0x64, 0x65, 0x1a, 0xf2, 0x01, 0x0a, 0x08, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x3e, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e,
	0x70, 0x65, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x50, 0x65, 0x65, 0x72, 0x2e,
	0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x06,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x38, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x70, 0x65,
	0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x50, 0x65, 0x65, 0x72, 0x2e, 0x50, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61,
	0x12, 0x36, 0x0a, 0x16, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x49, 0x66, 0x46, 0x69, 0x72, 0x73, 0x74,
	0x46, 0x6f, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x16, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x49, 0x66, 0x46, 0x69, 0x72, 0x73, 0x74, 0x46, 0x6f,
	0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x74, 0x0a, 0x0e, 0x50, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x75,
	0x62, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x1a, 0xba,
	0x01, 0x0a, 0x0c, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12,
	0x24, 0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x20, 0x0a,
	0x0b, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x1a, 0xe5, 0x01, 0x0a, 0x08,
	0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x04,
	0x76, 0x61, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6e, 0x61, 0x6b,
	0x61, 0x6d, 0x61, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x50,
	0x65, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x56, 0x61, 0x72,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x76, 0x61, 0x72, 0x73, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x72, 0x6f, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x4e, 0x65, 0x77, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x4e, 0x65, 0x77, 0x1a, 0x37, 0x0a, 0x09, 0x56, 0x61,
	0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0xf2, 0x0c, 0x0a, 0x05, 0x50, 0x61, 0x72, 0x74, 0x79, 0x1a, 0xc6, 0x01,
	0x0a, 0x04, 0x4a, 0x6f, 0x69, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x3e, 0x0a, 0x06,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6e,
	0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6b, 0x61, 0x6d,
	0x61, 0x50, 0x65, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x38, 0x0a, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6e, 0x61, 0x6b,
	0x61, 0x6d, 0x61, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x50,
	0x65, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x1a, 0x72, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74,
	0x65, 0x12, 0x39, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x72, 0x65, 0x61,
	0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x08, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x1a, 0x71, 0x0a, 0x06, 0x41, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x12, 0x39, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e,
	0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x1a, 0x71, 0x0a,
	0x06, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6e, 0x61, 0x6b, 0x61,
	0x6d, 0x61, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x1a, 0x35, 0x0a, 0x05, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x1a, 0x3f, 0x0a, 0x0f, 0x4a, 0x6f, 0x69, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x1a, 0x9d, 0x04, 0x0a, 0x0d, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x41, 0x64, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1a,
	0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x6d, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61,
	0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x61,
	0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x12, 0x6d, 0x0a, 0x10,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e,
	0x70, 0x65, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x50, 0x65, 0x65, 0x72, 0x2e,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x65, 0x72,
	0x41, 0x64, 0x64, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x70, 0x0a, 0x11, 0x6e,
	0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e,
	0x70, 0x65, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x50, 0x65, 0x65, 0x72, 0x2e,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x65, 0x72,
	0x41, 0x64, 0x64, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x6e, 0x75, 0x6d, 0x65,
	0x72, 0x69, 0x63, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x43, 0x0a,
	0x15, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x44, 0x0a, 0x16, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x58, 0x0a, 0x10, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x1a, 0x64, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x70,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0xed, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x4d, 0x73,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x12,
	0x41, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x72,
	0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x42, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65,
	0x49, 0x44, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d,
	0x61, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x50, 0x65, 0x65,
	0x72, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x52, 0x0a, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x1a, 0xba, 0x08, 0x0a, 0x05, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x1a, 0x8d, 0x01, 0x0a, 0x0d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x1a, 0xd0, 0x03, 0x0a, 0x04, 0x4a, 0x6f, 0x69, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70,
	0x69, 0x72, 0x79, 0x12, 0x40, 0x0a, 0x04, 0x76, 0x61, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e,
	0x4e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x50, 0x65, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x2e, 0x56, 0x61, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x04, 0x76, 0x61, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x50, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x50, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x72,
	0x74, 0x12, 0x4c, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x70, 0x65, 0x65,
	0x72, 0x2e, 0x4e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x50, 0x65, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a,
	0x37, 0x0a, 0x09, 0x56, 0x61, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xcf, 0x01, 0x0a, 0x0a, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x4e, 0x65, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x69, 0x73, 0x4e, 0x65, 0x77, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x12, 0x51, 0x0a, 0x0d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6e, 0x61,
	0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6b, 0x61, 0x6d, 0x61,
	0x50, 0x65, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x50,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x1a, 0x0d, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x1a, 0xd6, 0x01, 0x0a, 0x08, 0x53, 0x65, 0x6e, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x1a,
	0x08, 0x0a, 0x06, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x1a, 0x0a, 0x0a, 0x08, 0x47, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x32, 0xad, 0x01, 0x0a, 0x0d, 0x4e, 0x61, 0x6b, 0x61, 0x6d, 0x61,
	0x50, 0x65, 0x65, 0x72, 0x41, 0x70, 0x69, 0x12, 0x4a, 0x0a, 0x04, 0x43, 0x61, 0x6c, 0x6c, 0x12,
	0x20, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x4e, 0x61,
	0x6b, 0x61, 0x6d, 0x61, 0x50, 0x65, 0x65, 0x72, 0x2e, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70,
	0x65, 0x1a, 0x20, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e,
	0x4e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x50, 0x65, 0x65, 0x72, 0x2e, 0x45, 0x6e, 0x76, 0x65, 0x6c,
	0x6f, 0x70, 0x65, 0x12, 0x50, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x20, 0x2e,
	0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6b, 0x61,
	0x6d, 0x61, 0x50, 0x65, 0x65, 0x72, 0x2e, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x1a,
	0x20, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x4e, 0x61,
	0x6b, 0x61, 0x6d, 0x61, 0x50, 0x65, 0x65, 0x72, 0x2e, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70,
	0x65, 0x28, 0x01, 0x30, 0x01, 0x42, 0x68, 0x0a, 0x1b, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x65, 0x72,
	0x6f, 0x69, 0x63, 0x6c, 0x61, 0x62, 0x73, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x72,
	0x74, 0x61, 0x70, 0x69, 0x42, 0x0a, 0x4e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x50, 0x65, 0x65, 0x72,
	0x50, 0x01, 0x5a, 0x29, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68,
	0x65, 0x72, 0x6f, 0x69, 0x63, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61,
	0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x72, 0x74, 0x61, 0x70, 0x69, 0xaa, 0x02, 0x0f,
	0x4e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_peer_proto_rawDescOnce sync.Once
	file_peer_proto_rawDescData = file_peer_proto_rawDesc
)

func file_peer_proto_rawDescGZIP() []byte {
	file_peer_proto_rawDescOnce.Do(func() {
		file_peer_proto_rawDescData = protoimpl.X.CompressGZIP(file_peer_proto_rawDescData)
	})
	return file_peer_proto_rawDescData
}

var file_peer_proto_msgTypes = make([]protoimpl.MessageInfo, 37)
var file_peer_proto_goTypes = []interface{}{
	(*NakamaPeer)(nil),                        // 0: nakama.peer.NakamaPeer
	(*NakamaPeer_Frame)(nil),                  // 1: nakama.peer.NakamaPeer.Frame
	(*NakamaPeer_State)(nil),                  // 2: nakama.peer.NakamaPeer.State
	(*NakamaPeer_Envelope)(nil),               // 3: nakama.peer.NakamaPeer.Envelope
	(*NakamaPeer_Untrack)(nil),                // 4: nakama.peer.NakamaPeer.Untrack
	(*NakamaPeer_Status)(nil),                 // 5: nakama.peer.NakamaPeer.Status
	(*NakamaPeer_PresenceID)(nil),             // 6: nakama.peer.NakamaPeer.PresenceID
	(*NakamaPeer_Presence)(nil),               // 7: nakama.peer.NakamaPeer.Presence
	(*NakamaPeer_PresenceStream)(nil),         // 8: nakama.peer.NakamaPeer.PresenceStream
	(*NakamaPeer_PresenceMeta)(nil),           // 9: nakama.peer.NakamaPeer.PresenceMeta
	(*NakamaPeer_NodeMeta)(nil),               // 10: nakama.peer.NakamaPeer.NodeMeta
	(*NakamaPeer_Party)(nil),                  // 11: nakama.peer.NakamaPeer.Party
	(*NakamaPeer_Match)(nil),                  // 12: nakama.peer.NakamaPeer.Match
	nil,                                       // 13: nakama.peer.NakamaPeer.Frame.InfectedEntry
	nil,                                       // 14: nakama.peer.NakamaPeer.Envelope.ContextEntry
	nil,                                       // 15: nakama.peer.NakamaPeer.NodeMeta.VarsEntry
	(*NakamaPeer_Party_Join)(nil),             // 16: nakama.peer.NakamaPeer.Party.Join
	(*NakamaPeer_Party_Promote)(nil),          // 17: nakama.peer.NakamaPeer.Party.Promote
	(*NakamaPeer_Party_Accept)(nil),           // 18: nakama.peer.NakamaPeer.Party.Accept
	(*NakamaPeer_Party_Remove)(nil),           // 19: nakama.peer.NakamaPeer.Party.Remove
	(*NakamaPeer_Party_Close)(nil),            // 20: nakama.peer.NakamaPeer.Party.Close
	(*NakamaPeer_Party_JoinRequestList)(nil),  // 21: nakama.peer.NakamaPeer.Party.JoinRequestList
	(*NakamaPeer_Party_MatchmakerAdd)(nil),    // 22: nakama.peer.NakamaPeer.Party.MatchmakerAdd
	(*NakamaPeer_Party_MatchmakerRemove)(nil), // 23: nakama.peer.NakamaPeer.Party.MatchmakerRemove
	(*NakamaPeer_Party_DataSend)(nil),         // 24: nakama.peer.NakamaPeer.Party.DataSend
	(*NakamaPeer_Party_Result)(nil),           // 25: nakama.peer.NakamaPeer.Party.Result
	nil,                                       // 26: nakama.peer.NakamaPeer.Party.MatchmakerAdd.StringPropertiesEntry
	nil,                                       // 27: nakama.peer.NakamaPeer.Party.MatchmakerAdd.NumericPropertiesEntry
	(*NakamaPeer_Match_MatchPresence)(nil),    // 28: nakama.peer.NakamaPeer.Match.MatchPresence
	(*NakamaPeer_Match_Join)(nil),             // 29: nakama.peer.NakamaPeer.Match.Join
	(*NakamaPeer_Match_JoinResult)(nil),       // 30: nakama.peer.NakamaPeer.Match.JoinResult
	(*NakamaPeer_Match_ListMatches)(nil),      // 31: nakama.peer.NakamaPeer.Match.ListMatches
	(*NakamaPeer_Match_SendData)(nil),         // 32: nakama.peer.NakamaPeer.Match.SendData
	(*NakamaPeer_Match_Signal)(nil),           // 33: nakama.peer.NakamaPeer.Match.Signal
	(*NakamaPeer_Match_GetState)(nil),         // 34: nakama.peer.NakamaPeer.Match.GetState
	nil,                                       // 35: nakama.peer.NakamaPeer.Match.Join.VarsEntry
	nil,                                       // 36: nakama.peer.NakamaPeer.Match.Join.MetadataEntry
	(*timestamppb.Timestamp)(nil),             // 37: google.protobuf.Timestamp
	(*wrapperspb.BoolValue)(nil),              // 38: google.protobuf.BoolValue
	(*Envelope)(nil),                          // 39: nakama.realtime.Envelope
	(*UserPresence)(nil),                      // 40: nakama.realtime.UserPresence
}
var file_peer_proto_depIdxs = []int32{
	37, // 0: nakama.peer.NakamaPeer.Frame.timestamp:type_name -> google.protobuf.Timestamp
	38, // 1: nakama.peer.NakamaPeer.Frame.gossip:type_name -> google.protobuf.BoolValue
	13, // 2: nakama.peer.NakamaPeer.Frame.infected:type_name -> nakama.peer.NakamaPeer.Frame.InfectedEntry
	3,  // 3: nakama.peer.NakamaPeer.Frame.envelope:type_name -> nakama.peer.NakamaPeer.Envelope
	3,  // 4: nakama.peer.NakamaPeer.Frame.kickedOut:type_name -> nakama.peer.NakamaPeer.Envelope
	5,  // 5: nakama.peer.NakamaPeer.Frame.status:type_name -> nakama.peer.NakamaPeer.Status
	7,  // 6: nakama.peer.NakamaPeer.Frame.track:type_name -> nakama.peer.NakamaPeer.Presence
	4,  // 7: nakama.peer.NakamaPeer.Frame.untrack:type_name -> nakama.peer.NakamaPeer.Untrack
	3,  // 8: nakama.peer.NakamaPeer.Frame.broadcast:type_name -> nakama.peer.NakamaPeer.Envelope
	7,  // 9: nakama.peer.NakamaPeer.Frame.trackUpdate:type_name -> nakama.peer.NakamaPeer.Presence
	16, // 10: nakama.peer.NakamaPeer.Frame.partyJoin:type_name -> nakama.peer.NakamaPeer.Party.Join
	17, // 11: nakama.peer.NakamaPeer.Frame.partyPromote:type_name -> nakama.peer.NakamaPeer.Party.Promote
	18, // 12: nakama.peer.NakamaPeer.Frame.partyAccept:type_name -> nakama.peer.NakamaPeer.Party.Accept
	19, // 13: nakama.peer.NakamaPeer.Frame.partyRemove:type_name -> nakama.peer.NakamaPeer.Party.Remove
	20, // 14: nakama.peer.NakamaPeer.Frame.partyClose:type_name -> nakama.peer.NakamaPeer.Party.Close
	21, // 15: nakama.peer.NakamaPeer.Frame.partyJoinRequestList:type_name -> nakama.peer.NakamaPeer.Party.JoinRequestList
	22, // 16: nakama.peer.NakamaPeer.Frame.partyMatchmakerAdd:type_name -> nakama.peer.NakamaPeer.Party.MatchmakerAdd
	23, // 17: nakama.peer.NakamaPeer.Frame.partyMatchmakerRemove:type_name -> nakama.peer.NakamaPeer.Party.MatchmakerRemove
	24, // 18: nakama.peer.NakamaPeer.Frame.partyDataSend:type_name -> nakama.peer.NakamaPeer.Party.DataSend
	25, // 19: nakama.peer.NakamaPeer.Frame.partyResult:type_name -> nakama.peer.NakamaPeer.Party.Result
	29, // 20: nakama.peer.NakamaPeer.Frame.matchJoin:type_name -> nakama.peer.NakamaPeer.Match.Join
	30, // 21: nakama.peer.NakamaPeer.Frame.matchJoinResult:type_name -> nakama.peer.NakamaPeer.Match.JoinResult
	32, // 22: nakama.peer.NakamaPeer.Frame.matchDataSend:type_name -> nakama.peer.NakamaPeer.Match.SendData
	3,  // 23: nakama.peer.NakamaPeer.Frame.serviceBroadcast:type_name -> nakama.peer.NakamaPeer.Envelope
	1,  // 24: nakama.peer.NakamaPeer.State.frames:type_name -> nakama.peer.NakamaPeer.Frame
	7,  // 25: nakama.peer.NakamaPeer.State.Presences:type_name -> nakama.peer.NakamaPeer.Presence
	14, // 26: nakama.peer.NakamaPeer.Envelope.context:type_name -> nakama.peer.NakamaPeer.Envelope.ContextEntry
	39, // 27: nakama.peer.NakamaPeer.Envelope.nakamaEnvelope:type_name -> nakama.realtime.Envelope
	8,  // 28: nakama.peer.NakamaPeer.Untrack.stream:type_name -> nakama.peer.NakamaPeer.PresenceStream
	8,  // 29: nakama.peer.NakamaPeer.Untrack.skipStream:type_name -> nakama.peer.NakamaPeer.PresenceStream
	8,  // 30: nakama.peer.NakamaPeer.Presence.stream:type_name -> nakama.peer.NakamaPeer.PresenceStream
	9,  // 31: nakama.peer.NakamaPeer.Presence.meta:type_name -> nakama.peer.NakamaPeer.PresenceMeta
	15, // 32: nakama.peer.NakamaPeer.NodeMeta.vars:type_name -> nakama.peer.NakamaPeer.NodeMeta.VarsEntry
	8,  // 33: nakama.peer.NakamaPeer.Party.Join.stream:type_name -> nakama.peer.NakamaPeer.PresenceStream
	9,  // 34: nakama.peer.NakamaPeer.Party.Join.meta:type_name -> nakama.peer.NakamaPeer.PresenceMeta
	40, // 35: nakama.peer.NakamaPeer.Party.Promote.presence:type_name -> nakama.realtime.UserPresence
	40, // 36: nakama.peer.NakamaPeer.Party.Accept.presence:type_name -> nakama.realtime.UserPresence
	40, // 37: nakama.peer.NakamaPeer.Party.Remove.presence:type_name -> nakama.realtime.UserPresence
	26, // 38: nakama.peer.NakamaPeer.Party.MatchmakerAdd.stringProperties:type_name -> nakama.peer.NakamaPeer.Party.MatchmakerAdd.StringPropertiesEntry
	27, // 39: nakama.peer.NakamaPeer.Party.MatchmakerAdd.numericProperties:type_name -> nakama.peer.NakamaPeer.Party.MatchmakerAdd.NumericPropertiesEntry
	40, // 40: nakama.peer.NakamaPeer.Party.Result.userPresence:type_name -> nakama.realtime.UserPresence
	6,  // 41: nakama.peer.NakamaPeer.Party.Result.presenceID:type_name -> nakama.peer.NakamaPeer.PresenceID
	35, // 42: nakama.peer.NakamaPeer.Match.Join.vars:type_name -> nakama.peer.NakamaPeer.Match.Join.VarsEntry
	36, // 43: nakama.peer.NakamaPeer.Match.Join.metadata:type_name -> nakama.peer.NakamaPeer.Match.Join.MetadataEntry
	28, // 44: nakama.peer.NakamaPeer.Match.JoinResult.matchPresence:type_name -> nakama.peer.NakamaPeer.Match.MatchPresence
	3,  // 45: nakama.peer.NakamaPeerApi.Call:input_type -> nakama.peer.NakamaPeer.Envelope
	3,  // 46: nakama.peer.NakamaPeerApi.Stream:input_type -> nakama.peer.NakamaPeer.Envelope
	3,  // 47: nakama.peer.NakamaPeerApi.Call:output_type -> nakama.peer.NakamaPeer.Envelope
	3,  // 48: nakama.peer.NakamaPeerApi.Stream:output_type -> nakama.peer.NakamaPeer.Envelope
	47, // [47:49] is the sub-list for method output_type
	45, // [45:47] is the sub-list for method input_type
	45, // [45:45] is the sub-list for extension type_name
	45, // [45:45] is the sub-list for extension extendee
	0,  // [0:45] is the sub-list for field type_name
}

func init() { file_peer_proto_init() }
func file_peer_proto_init() {
	if File_peer_proto != nil {
		return
	}
	file_realtime_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_peer_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NakamaPeer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NakamaPeer_Frame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NakamaPeer_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NakamaPeer_Envelope); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NakamaPeer_Untrack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NakamaPeer_Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NakamaPeer_PresenceID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NakamaPeer_Presence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NakamaPeer_PresenceStream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NakamaPeer_PresenceMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NakamaPeer_NodeMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NakamaPeer_Party); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NakamaPeer_Match); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NakamaPeer_Party_Join); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NakamaPeer_Party_Promote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NakamaPeer_Party_Accept); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NakamaPeer_Party_Remove); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NakamaPeer_Party_Close); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NakamaPeer_Party_JoinRequestList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NakamaPeer_Party_MatchmakerAdd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NakamaPeer_Party_MatchmakerRemove); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NakamaPeer_Party_DataSend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NakamaPeer_Party_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NakamaPeer_Match_MatchPresence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NakamaPeer_Match_Join); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NakamaPeer_Match_JoinResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NakamaPeer_Match_ListMatches); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NakamaPeer_Match_SendData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NakamaPeer_Match_Signal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NakamaPeer_Match_GetState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_peer_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*NakamaPeer_Frame_Envelope)(nil),
		(*NakamaPeer_Frame_KickedOut)(nil),
		(*NakamaPeer_Frame_Status)(nil),
		(*NakamaPeer_Frame_Track)(nil),
		(*NakamaPeer_Frame_Untrack)(nil),
		(*NakamaPeer_Frame_Broadcast)(nil),
		(*NakamaPeer_Frame_TrackUpdate)(nil),
		(*NakamaPeer_Frame_PartyJoin)(nil),
		(*NakamaPeer_Frame_PartyPromote)(nil),
		(*NakamaPeer_Frame_PartyAccept)(nil),
		(*NakamaPeer_Frame_PartyRemove)(nil),
		(*NakamaPeer_Frame_PartyClose)(nil),
		(*NakamaPeer_Frame_PartyJoinRequestList)(nil),
		(*NakamaPeer_Frame_PartyMatchmakerAdd)(nil),
		(*NakamaPeer_Frame_PartyMatchmakerRemove)(nil),
		(*NakamaPeer_Frame_PartyDataSend)(nil),
		(*NakamaPeer_Frame_PartyResult)(nil),
		(*NakamaPeer_Frame_MatchJoin)(nil),
		(*NakamaPeer_Frame_MatchJoinResult)(nil),
		(*NakamaPeer_Frame_MatchDataSend)(nil),
		(*NakamaPeer_Frame_ServiceBroadcast)(nil),
	}
	file_peer_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*NakamaPeer_Envelope_NakamaEnvelope)(nil),
		(*NakamaPeer_Envelope_Bytes)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_peer_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   37,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_peer_proto_goTypes,
		DependencyIndexes: file_peer_proto_depIdxs,
		MessageInfos:      file_peer_proto_msgTypes,
	}.Build()
	File_peer_proto = out.File
	file_peer_proto_rawDesc = nil
	file_peer_proto_goTypes = nil
	file_peer_proto_depIdxs = nil
}
