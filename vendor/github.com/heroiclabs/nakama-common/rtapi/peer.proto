syntax = "proto3";

package nakama.peer;

import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "realtime.proto";

option go_package = "github.com/heroiclabs/nakama-common/rtapi";

option java_multiple_files = true;
option java_outer_classname = "NakamaPeer";
option java_package = "com.heroiclabs.nakama.rtapi";

option csharp_namespace = "Nakama.Protobuf";

service NakamaPeerApi {
    rpc Call(NakamaPeer.Envelope) returns(NakamaPeer.Envelope);
    rpc Stream(stream NakamaPeer.Envelope) returns(stream NakamaPeer.Envelope);
}

message NakamaPeer {
    message Frame {
        string id = 1;
        string inboxAddress = 2;
        string node = 3;
        google.protobuf.Timestamp timestamp = 4;
        google.protobuf.BoolValue gossip  =  5;
        map<string, bool> infected = 6;
        oneof payload {
            Envelope envelope = 7;
            Envelope kickedOut = 8;
            Status status = 9;
            Presence track = 10;
            Untrack untrack = 11;
            Envelope broadcast = 12;
            Presence trackUpdate = 13;
            Party.Join partyJoin = 14;
            Party.Promote partyPromote = 15;
            Party.Accept partyAccept = 16;
            Party.Remove partyRemove = 17;
            Party.Close partyClose = 18;
            Party.JoinRequestList partyJoinRequestList = 19;
            Party.MatchmakerAdd partyMatchmakerAdd = 20;
            Party.MatchmakerRemove partyMatchmakerRemove = 21;
            Party.DataSend partyDataSend = 22;
            Party.Result  partyResult = 23;
            Match.Join matchJoin = 24;
            Match.JoinResult matchJoinResult = 25;
            Match.SendData matchDataSend = 26;
            Envelope serviceBroadcast = 27;
        }
    }

    message State {
        string node = 1;
        repeated Frame frames = 2;
        repeated Presence Presences = 3;
    }

    message Envelope {
        repeated string recipient = 1;
        uint32 reason = 2;
        map<string, string> context = 3;
        bool IsSessionID = 4;
        oneof payload {
            realtime.Envelope nakamaEnvelope = 5;
            bytes bytes = 6;
        }
    }

    message Untrack {
        string sessionID = 1;
        string userID = 2;
        repeated PresenceStream  stream = 3;
        repeated uint32 modes = 4;
        uint32 reason = 5;  
        PresenceStream skipStream = 6;
    }

    message Status {
        string name = 1;
        int32  health = 2;
        int32 sessionCount = 3;
        int32 presenceCount = 4;
        int32 matchCount = 5;
        int32 goroutineCount = 6;
        double avgLatencyMs = 7;
        double avgRateSec = 8;
        double avgInputKbs = 9;
        double avgOutputKbs = 10;
    }

    message PresenceID {
        string sessionID = 1;
        string node = 2;
    }

    message Presence {
        string sessionID = 1;
        string userID = 2;
        repeated PresenceStream  stream = 3;
        repeated PresenceMeta meta = 4;
        bool allowIfFirstForSession = 5;
    }

    message PresenceStream {
        uint32 mode        = 1;
        string subject     = 2;
        string subcontext  = 3;
        string label       = 4;
    }

    message PresenceMeta {
        uint32 sessionFormat = 1;
        bool   hidden = 2;
        bool   persistence  = 3;
        string username = 4;    
        string status = 5;      
        uint32 reason = 6;      
    }

    message NodeMeta {
        string name = 1;
        map<string, string> vars = 2;
        string ip = 3;
        uint32 port = 4;
        string role = 5;
        bool isNew = 6;
    }

    message Party {
        message Join {
            string id = 1;
            string sessionID = 2;
            string userID = 3;
            PresenceStream stream = 4;
            PresenceMeta meta = 5;
        }

        message Promote {
            realtime.UserPresence presence = 1;
            string sessionID = 2;
            string id = 3;
        }

        message Accept{
            realtime.UserPresence presence = 1;
            string sessionID = 2;
            string id = 3;
        }
        message Remove{
            realtime.UserPresence presence = 1;
            string sessionID = 2;
            string id = 3;
        }

        message Close{
            string sessionID = 1;
            string id = 2;
        }

        message JoinRequestList{
            string sessionID = 1;
            string id = 2;
        }

        message MatchmakerAdd{
            string sessionID = 1;
            string id = 2;
            string query = 3;
            int32 minCount = 4;
            int32 maxCount = 5;
            int32 countMultiple = 6;
            map<string, string> stringProperties = 7;
            map<string, double> numericProperties = 8;
        }
        message MatchmakerRemove{
            string sessionID = 1;
            string id = 2;
            string ticket = 3;
        }

        message DataSend{
            string sessionID = 1;
            string id = 2;
            int64 opCode = 3;
            bytes data = 4;
        }

        message Result {
            int32 code = 1;
            bool ok = 2;
            string errMsg = 3;
            repeated realtime.UserPresence userPresence = 4;
            string stringValue = 5;
            repeated PresenceID presenceID = 6;
        }
    }

    message Match {
        message MatchPresence {
            string node = 1;
            string userID = 2;
            string sessionID = 3;
            string username = 4;
            uint32 reason = 5;
        }

        message Join {
            string id = 1;
            string userID = 2;
            string sessionID = 3;
            string username = 4;
            int64 sessionExpiry = 5;
            map<string, string> vars = 6;
            string clientIP = 7;
            string clientPort = 8;
            map<string, string> metadata = 9;
        }

        message JoinResult {
            bool found = 1;
            bool allow = 2;
            bool isNew = 3;
            string reason = 4;
            string label = 5;
            repeated MatchPresence matchPresence = 6;
        }

        message ListMatches{}
        message SendData{
            string id = 1;
            string userID = 2;
            string sessionID = 3;
            string username = 4;
            int64 opCode = 5;
            bytes data = 6;
            bool reliable = 7;
            int64 receiveTime = 8;
        }
        message Signal{}
        message GetState{}
    }
}